# Copyright (c) 2024 Intel Corporation.
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Values.config.dlstreamer_pipeline_server.name }}
  namespace: {{ $.Values.namespace }}
spec:
  type: NodePort
  selector:
    app: dlstreamer-pipeline-server
  ports:
  - name: "rest-api"
    port: {{ $.Values.config.dlstreamer_pipeline_server.int.rest_api_port }}
    targetPort: {{ $.Values.config.dlstreamer_pipeline_server.int.rest_api_port }}
    nodePort: {{ $.Values.config.dlstreamer_pipeline_server.ext.rest_api_port }}
  - name: "rtsp-output-streaming"
    port: {{ $.Values.config.dlstreamer_pipeline_server.int.rtsp_output_port }}
    targetPort: {{ $.Values.config.dlstreamer_pipeline_server.int.rtsp_output_port }}
    nodePort: {{ $.Values.config.dlstreamer_pipeline_server.ext.rtsp_output_port }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dlstreamer-pipeline-server
  name: deployment-{{ $.Values.config.dlstreamer_pipeline_server.name }}
  namespace: {{ $.Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dlstreamer-pipeline-server
  template:
    metadata:
      labels:
        app: dlstreamer-pipeline-server
    spec:
      securityContext:
        supplementalGroups: [109,110,992]
      {{- if and $.Values.DOCKER_USERNAME $.Values.DOCKER_PASSWORD }}
      imagePullSecrets:
      - name: registryauth
      {{- end }}
      # hostNetwork: true
      initContainers:
      - name: video-downloader
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          mkdir -p /tmp/videos
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000101.mp4 -o /tmp/videos/VIRAT_S_000101.mp4
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000102.mp4 -o /tmp/videos/VIRAT_S_000102.mp4
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000103.mp4 -o /tmp/videos/VIRAT_S_000103.mp4
          curl -L https://github.com/intel/metro-ai-suite/raw/refs/heads/videos/videos/VIRAT_S_000104.mp4 -o /tmp/videos/VIRAT_S_000104.mp4
        env:
        - name: http_proxy
          value: {{ $.Values.env.http_proxy }}
        - name: https_proxy
          value: {{ $.Values.env.https_proxy }}
        - name: no_proxy
          value: "{{ $.Values.env.no_proxy }},{{ $.Values.env.HOST_IP }}"
        volumeMounts:
        - name: videos-volume
          mountPath: /tmp/videos
      - name: model-downloader
        image: intel/dlstreamer:EAL1.2.RC2_2025.1.RC2-ubuntu24
        command:
        - /bin/sh
        - -c
        - |
          export MODELS_PATH="/tmp/models/intel"
          mkdir -p $MODELS_PATH/pedestrian-and-vehicle-detector-adas-0001/FP32/
          curl -o "$MODELS_PATH/pedestrian-and-vehicle-detector-adas-0001/FP32/pedestrian-and-vehicle-detector-adas-0001.xml" -L "https://storage.openvinotoolkit.org/repositories/open_model_zoo/2023.0/models_bin/1/pedestrian-and-vehicle-detector-adas-0001/FP32/pedestrian-and-vehicle-detector-adas-0001.xml?raw=true"
          curl -o "$MODELS_PATH/pedestrian-and-vehicle-detector-adas-0001/FP32/pedestrian-and-vehicle-detector-adas-0001.bin" -L "https://storage.openvinotoolkit.org/repositories/open_model_zoo/2023.0/models_bin/1/pedestrian-and-vehicle-detector-adas-0001/FP32/pedestrian-and-vehicle-detector-adas-0001.bin?raw=true"
          curl -o "$MODELS_PATH/pedestrian-and-vehicle-detector-adas-0001/pedestrian-and-vehicle-detector-adas-0001.json" -L "https://raw.githubusercontent.com/dlstreamer/dlstreamer/refs/heads/master/samples/gstreamer/model_proc/intel/pedestrian-and-vehicle-detector-adas-0001.json"
        env:
        - name: http_proxy
          value: {{ $.Values.env.http_proxy }}
        - name: https_proxy
          value: {{ $.Values.env.https_proxy }}
        - name: no_proxy
          value: "{{ $.Values.env.no_proxy }},{{ $.Values.env.HOST_IP }}"
        volumeMounts:
        - name: models-volume
          mountPath: /tmp/models
      containers:
      - name: {{ $.Values.config.dlstreamer_pipeline_server.name }}
        image: {{ $.Values.DOCKER_REGISTRY }}{{ $.Values.dlstreamer_pipeline_server.image }}:{{ $.Values.dlstreamer_pipeline_server.imageTag }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        {{- if $.Values.privileged_access_required }}
        securityContext:
          privileged: true  # Required for direct access to /dev
        {{- end }}
      {{- if $.Values.gpu.enabled }}
          resources:
          limits:
            {{ $.Values.gpu.type }}: {{ $.Values.gpu.count }}
        {{- end }}
        volumeMounts:
        - mountPath: /var/cache/pipeline_root
          name: vol-pipeline-root-tmpfs0
        - name: dev
          mountPath: /dev
        - name: dev-shm
          mountPath: /dev/shm
        - name: tmp
          mountPath: /tmp
        - name: var-tmp
          mountPath: /var/tmp
        - name: run-udev
          mountPath: /run/udev
        - name: {{ $.Values.volumes.pipelines.name }}
          mountPath: {{ $.Values.volumes.pipelines.location }}
        - name: dlstreamer-pipeline-server-input
          mountPath: /home/pipeline-server/config.json
          subPath: config.json
        - name: videos-volume
          mountPath: /home/pipeline-server/videos
        - name: models-volume
          mountPath: /home/pipeline-server/models
        env:
        - name: AppName
          value: 'DLStreamerPipelineServer'
        - name: ENABLE_WEBRTC
          value: "{{ $.Values.env.ENABLE_WEBRTC }}"
        - name: ENABLE_RTSP
          value: "{{ $.Values.env.ENABLE_RTSP }}"
        - name: WEBRTC_SIGNALING_SERVER
          value: "http://mediamtx:{{ $.Values.config.mediamtx.int.mediamtx_port }}"
        - name: RUN_MODE
          value: "EVA"
        - name: SERVICE_NAME
          value: "dlstreamer-pipeline-server"
        - name: REST_SERVER_PORT
          value: "8080"
        - name: http_proxy
          value: {{ $.Values.env.http_proxy }}
        - name: https_proxy
          value: {{ $.Values.env.https_proxy }}
        - name: no_proxy
          value: "{{ $.Values.env.no_proxy }},{{ $.Values.env.HOST_IP }},mediamtx"
        - name: NO_PROXY
          value: "{{ $.Values.env.no_proxy }},{{ $.Values.env.HOST_IP }},mediamtx"
        - name: MQTT_HOST
          value: "broker"
        - name: MQTT_PORT
          value: "1883"
      volumes:
      - name: vol-pipeline-root-tmpfs0
        emptyDir: {}
      - name: dev
        hostPath:
          path: /dev
      - name: dev-shm
        hostPath:
          path: /dev/shm
      - name: tmp
        hostPath:
          path: /tmp
      - name: var-tmp
        hostPath:
          path: /var/tmp
      - name: run-udev
        hostPath:
          path: /run/udev
      - name: {{ $.Values.volumes.pipelines.name }}
        hostPath:
          path: {{ $.Values.volumes.pipelines.hostpath }}
      - name: dlstreamer-pipeline-server-input
        configMap:
          name: dlstreamer-pipeline-server-config-input
      - name: videos-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: models-volume
        emptyDir:
          sizeLimit: 100Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespace }}
  name: dlstreamer-pipeline-server-config-input
data:
  config.json: |-
{{ .Files.Get "config/dlstreamer-pipeline-server/config.json" | indent 4 }}