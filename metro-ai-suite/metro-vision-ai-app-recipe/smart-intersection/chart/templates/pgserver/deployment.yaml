apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-pgserver
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-pgserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-pgserver
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-pgserver
    spec:
      initContainers:
      - name: init-smart-intersection-ri
        image: alpine:latest
        env:
          - name: http_proxy
            value: {{ .Values.http_proxy | quote }}
          - name: https_proxy
            value: {{ .Values.https_proxy | quote }}
          - name: no_proxy
            value: {{ .Values.no_proxy | quote }}
        command:
        - /bin/sh
        - -c
        - |
          if [ -f /data/smart-intersection-ri.tar.bz2 ]; then
            echo "File exists: /data/smart-intersection-ri.tar.bz2"
          else
            echo "File does NOT exist: /data/smart-intersection-ri.tar.bz2"
            echo "Downloading file from GitHub..."
            apk add --no-cache wget
            wget -O /data/smart-intersection-ri.tar.bz2 "https://github.com/open-edge-platform/edge-ai-suites/raw/refs/heads/feature/ITEP-68946-update-scenescape/metro-ai-suite/metro-vision-ai-app-recipe/smart-intersection/src/webserver/smart-intersection-ri.tar.bz2"
            if [ $? -eq 0 ]; then
              echo "File downloaded successfully to /data/smart-intersection-ri.tar.bz2"
            else
              echo "Failed to download file"
              exit 1
            fi
          fi
        volumeMounts:
        - name: smart-intersection-ri-data
          mountPath: /data
      containers:
      - name: pgserver
        image: {{ .Values.pgserver.repository }}:{{ .Values.pgserver.tag }}
        imagePullPolicy: IfNotPresent
        env:
        - name: http_proxy
          value: {{ .Values.http_proxy | quote }}
        - name: https_proxy
          value: {{ .Values.https_proxy | quote }}
        - name: no_proxy
          value: "{{ .Values.no_proxy }},influxdb2, ntpserv,smart-intersection-broker,smart-intersection-dlstreamer-pipeline-server,smart-intersection-grafana,smart-intersection-nodered,smart-intersection-pgserver,smart-intersection-scene,smart-intersection-web"
        - name: DBROOT
          value: /workspace
        - name: EXAMPLEDB
          value: smart-intersection-ri.tar.bz2
        volumeMounts:
        - name: pgserver-db
          mountPath: /workspace/db
        - name: pgserver-migrations
          mountPath: /workspace/migrations
        - name: pgserver-media
          mountPath: /workspace/media
        - name: pgserver-config
          mountPath: /tmp
        - name: secrets
          mountPath: /tmp/secrets  # Mount secrets in /tmp/secrets
        - name: smart-intersection-ri-data
          mountPath: /data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          readOnlyRootFilesystem: false
          capabilities:
            add:
              - SYS_ADMIN
          privileged: true
        command: ["/bin/bash", "-e", "-c"]
        args:
        - >
          sed -i 's+RUNSECRETS=/run/secrets+RUNSECRETS=/tmp/secrets+g' /usr/local/bin/scenescape-init &&
          cp /data/smart-intersection-ri.tar.bz2 /home/scenescape/SceneScape/smart-intersection-ri.tar.bz2 &&
          cp /tmp/secrets/secrets.py /home/scenescape/SceneScape/manager/secrets.py &&
          cp /tmp/user_access_config.json /home/scenescape/SceneScape/user_access_config.json &&
          chown -R scenescape:scenescape /workspace &&
          sed -i 's+/run/secrets+/tmp/secrets+g' /home/scenescape/SceneScape/manager/settings.py &&
          sed -i '/touch \/tmp\/healthy/d' /usr/local/bin/scenescape-init &&
          SUPASS=$(cat /tmp/secrets/supass) /usr/local/bin/scenescape-init database --preloadexample
      volumes:
      - name: pgserver-db
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pgserver-db
      - name: pgserver-migrations
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pgserver-migrations
      - name: pgserver-media
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pgserver-media
      - name: pgserver-config
        configMap:
          name: {{ .Release.Name }}-pgserver-config
      - name: secrets
        secret:
          secretName: {{ .Release.Name }}-pgserver-secrets
      - name: smart-intersection-ri-data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-ri-pvc
