---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "[WindTurbine Sample App] SDLe Scans - Trivy, DBS, Bandit and Virus Scan"
run-name: "[WindTurbine Sample App] SDLe Scans - Trivy, DBS, Bandit and Virus Scans workflow (by @${{ github.actor }} via ${{ github.event_name }})"


# Only run at most 1 workflow concurrently per PR, unlimited for branches
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  workflow_dispatch:

jobs:   
  trivy-scan-job:
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false  
      - name: Install Trivy from Aqua Security APT repo
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg lsb-release wget apt-transport-https curl jq
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/trivy.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y trivy
      - name: Trivy filesystem/repo scan
        continue-on-error: true
        shell: bash
        run: |
          pwd
          cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
          trivy --version
          which trivy
          trivy image --download-db-only
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o trivy-html.tpl
          cat << 'EOF' > csv.tpl
          {{ range . }}
          Trivy Vulnerability Scan Results ({{- .Target -}})
          VulnerabilityID,Severity,CVSS Score,Title,Library,Vulnerable Version,Fixed Version,Information URL,Triage Information
          {{ range .Vulnerabilities }}
              {{- .VulnerabilityID }},
              {{- .Severity }},
              {{- range $key, $value := .CVSS }}
                  {{- if (eq $key "nvd") }}
                      {{- .V3Score -}}
                  {{- end }}
              {{- end }},
              {{- quote .Title }},
              {{- quote .PkgName }},
              {{- quote .InstalledVersion }},
              {{- quote .FixedVersion }},
              {{- .PrimaryURL }}
          {{ else -}}
              No vulnerabilities found at this time.
          {{ end }}
          Trivy Dependency Scan Results ({{ .Target }})
          ID,Name,Version,Notes
          {{ range .Packages -}}
              {{- quote .ID }},
              {{- quote .Name }},
              {{- quote .Version }}
          {{ else -}}
              No dependencies found at this time.
          {{ end }}
          {{ end }}
          EOF

          # Use the downloaded template
          trivy fs . --format template --template "@trivy-html.tpl" -o "trivy_fs_full_report_code_scan.html" 
          trivy fs --list-all-pkgs --format template --template "@csv.tpl" --output trivy-fs-full-report.csv .
          trivy fs --ignore-unfixed . | tee trivy-fs-full-report-ignore-unfixed.txt  
      
      - name: Trivy Image Scan
        continue-on-error: true
        shell: bash
        run: |
              pwd
              echo "Building Wind Turbine Sample App and scanning Image"
              cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
              make down
              sed -i -e "s|OPC_UA_SERVER_IMAGE=.*|OPC_UA_SERVER_IMAGE=ia-opcua-server:latest|g" .env
              sed -i -e "s|MQTT_PUBLISHER_IMAGE=.*|MQTT_PUBLISHER_IMAGE=ia-mqtt-publisher:latest|g" .env
              make build

              trivy image ia-opcua-server:latest --ignore-unfixed --format template --template "@trivy-html.tpl" -o trivy_image_scan_opcua_server.html
              trivy image ia-opcua-server:latest --ignore-unfixed --format template --template "@csv.tpl" -o trivy_image_scan_opcua_server.csv
              trivy image --quiet --format spdx-json --output trivy_image_scan_opcua_server.spdx.json ia-opcua-server:latest

              trivy image --list-all-pkgs --format template --template "@csv.tpl" --output trivy-fs-opcua.csv ia-opcua-server:latest
              trivy image --ignore-unfixed ia-opcua-server:latest | tee trivy-fs-opcua-ignore-unfixed.txt


              trivy image ia-mqtt-publisher:latest --ignore-unfixed --format template --template "@trivy-html.tpl" -o trivy_image_scan_mqtt_publisher.html
              trivy image ia-mqtt-publisher:latest --ignore-unfixed --format template --template "@csv.tpl" -o trivy_image_scan_mqtt_publisher.csv
              trivy image --quiet --format spdx-json --output trivy_image_scan_mqtt_publisher.spdx.json ia-mqtt-publisher:latest

              trivy image --list-all-pkgs --format template --template "@csv.tpl" --output trivy-fs-mqttpublisher.csv ia-mqtt-publisher:latest
              trivy image --ignore-unfixed ia-mqtt-publisher:latest | tee trivy-fs-mqttpublisher-ignore-unfixed.txt

              echo "completed Wind Turbine Sample App Image scanning"
            
      - name: Upload Trivy Image Scan Report
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: Trivy Scan report fs and image
          path: |
                manufacturing-ai-suite/wind-turbine-anomaly-detection/trivy*

      - name: Trivy config scan for helm charts 
        run: |
          cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
          make gen_helm_charts
          cd helm
          trivy config . >> trivy_helm.txt
          
      - name: Upload Scan artifact to Github
        uses: actions/upload-artifact@v4
        with:
          name: Trivy Config Scan for Helm
          path: manufacturing-ai-suite/wind-turbine-anomaly-detection/helm/trivy_*
      
  trivy-config-opcua-dockerfile-scan:
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    name: Scan OPCUA Dockerfile
    strategy:
      fail-fast: false
    uses: open-edge-platform/edge-ai-libraries/.github/workflows/trivy-config-mode.yaml@e6e04af3dbca805db9118b85a22ad2998f7eec39
    with:
      dockerfile-path: manufacturing-ai-suite/wind-turbine-anomaly-detection/simulator/opcua-server/Dockerfile
      trivy-report-format: 'json'
      severity-levels: 'HIGH,CRITICAL'
      output-report-path: trivy-opcua-dockerfile.json
      name: Time Series OPCUA Dockerfile

  trivy-config-mqttpublisher-dockerfile-scan:
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    name: Scan mqttpublisher Dockerfile
    strategy:
      fail-fast: false
    uses: open-edge-platform/edge-ai-libraries/.github/workflows/trivy-config-mode.yaml@e6e04af3dbca805db9118b85a22ad2998f7eec39
    with:
      dockerfile-path: manufacturing-ai-suite/wind-turbine-anomaly-detection/simulator/mqtt-publisher/Dockerfile
      trivy-report-format: 'json'
      severity-levels: 'HIGH,CRITICAL'
      output-report-path: trivy-mqttpublisher-dockerfile.json
      name: Time Series mqttpublisher Dockerfile
  
  bandit-scans:
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    name: Run Bandit Scan
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu_version: ubuntu24
    steps:
    - name: Check out edge-ai-suites repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Run Bandit Scan
      run: |
        mkdir -p reports
        docker pull ghcr.io/pycqa/bandit/bandit
        echo "### Bandit Scan Results" >> $GITHUB_STEP_SUMMARY
        docker run --rm -v "${{ github.workspace }}:/src" ghcr.io/pycqa/bandit/bandit -r /src/manufacturing-ai-suite/wind-turbine-anomaly-detection/ -f txt -o /src/reports/bandit-report.txt || true >> $GITHUB_STEP_SUMMARY
        echo "Please find full report in bandit-report.txt" >> $GITHUB_STEP_SUMMARY
    - name: Upload Scan Reports
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: reports/bandit-report.txt

  virus-scans:
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    name: Run Virus Scan
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu_version: ubuntu24
    steps:
    - name: Check out edge-ai-libraries repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Run Virus Scan
      run: |
        mkdir -p reports
        docker pull clamav/clamav
        echo "### Virus Scan Results" >> $GITHUB_STEP_SUMMARY
        docker run --rm -v "${{ github.workspace }}:/src" clamav/clamav clamscan -r  /src/manufacturing-ai-suite/wind-turbine-anomaly-detection/ > ./reports/clamav-report.txt || true
        echo "Please find full report in clamav-report.txt" >> $GITHUB_STEP_SUMMARY
    - name: Upload Scan Reports
      uses: actions/upload-artifact@v4
      with:
        name: virus-reports
        path: reports/clamav-report.txt
  
  DBS_job:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: check the system
        run: |
          docker ps &&
          uname -a &&
          docker version && 
          git version && 
          docker compose version

      - name: Checkout docker/docker-bench-security (master)
        uses: actions/checkout@v4
        with:
          repository: docker/docker-bench-security
          ref: master
          path: docker-bench-security
          persist-credentials: false
      
      - name: Build Docker Bench Security
        run: |
          cd docker-bench-security
          docker build --no-cache -t docker-bench-security .

      - name: Checkout Time Series Analytics microservice (edge-ai-libraries)
        uses: actions/checkout@v4
        with:
          repository: open-edge-platform/edge-ai-libraries
          ref: main
          path: edge-ai-libraries
          persist-credentials: false
      - name: Building Time Series Analytics microservices
        run: |
          cd ./edge-ai-libraries/microservices/time-series-analytics/docker
          docker compose down -v 
          docker compose build

      - name: Deploy Wind Turbine Sample App 
        run: |
          cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
          make down 
          # Generate random values for sensitive environment variables
          INFLUXDB_USERNAME=$(openssl rand -hex 4)
          INFLUXDB_PASSWORD=$(openssl rand -hex 6)
          VISUALIZER_GRAFANA_USER=$(openssl rand -hex 4)
          VISUALIZER_GRAFANA_PASSWORD=$(openssl rand -hex 6)
          MR_PSQL_PASSWORD=$(openssl rand -hex 4)
          MR_MINIO_ACCESS_KEY=$(openssl rand -hex 4)
          MR_MINIO_SECRET_KEY=$(openssl rand -hex 4)

          sed -i "s/INFLUXDB_USERNAME=.*/INFLUXDB_USERNAME=${INFLUXDB_USERNAME}/g" .env
          sed -i "s/INFLUXDB_PASSWORD=.*/INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}/g" .env
          sed -i "s/VISUALIZER_GRAFANA_USER=.*/VISUALIZER_GRAFANA_USER=${VISUALIZER_GRAFANA_USER}/g" .env
          sed -i "s/VISUALIZER_GRAFANA_PASSWORD=.*/VISUALIZER_GRAFANA_PASSWORD=${VISUALIZER_GRAFANA_PASSWORD}/g" .env
          sed -i "s/MR_PSQL_PASSWORD=.*/MR_PSQL_PASSWORD=${MR_PSQL_PASSWORD}/g" .env
          sed -i "s/MR_MINIO_ACCESS_KEY=.*/MR_MINIO_ACCESS_KEY=${MR_MINIO_ACCESS_KEY}/g" .env
          sed -i "s/MR_MINIO_SECRET_KEY=.*/MR_MINIO_SECRET_KEY=${MR_MINIO_SECRET_KEY}/g" .env 
          make build
          echo "Deploying using opcua ingestion"
          docker compose up -d

      - name: DBS download and scan for Wind Turbine Sample App
        run: |
          cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker-bench-security > dbs_scan_windturbine_sample_app.txt

      - name: Undeploy Time Series Analytics microservice
        run: |
          cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
          make down
          
      - name: Upload Scan artifact to Github
        uses: actions/upload-artifact@v4
        with:
          name: DBS_time-series-analytics
          path:  manufacturing-ai-suite/wind-turbine-anomaly-detection/dbs_scan_*
